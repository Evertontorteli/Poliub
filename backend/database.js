// backend/database.js
const mysql = require('mysql2/promise');
require('dotenv').config();

let pool;

async function testConnection(p) {
  const conn = await p.getConnection();
  await conn.release();
}

async function initDb() {
  const isProd = (process.env.NODE_ENV === 'production');
  const uri    = process.env.MYSQL_PUBLIC_URL || process.env.MYSQL_URL;

  // üü¢ PRODU√á√ÉO ‚Üí Prioriza URL p√∫blica do Railway
  if (isProd) {
    if (!uri) throw new Error('Em produ√ß√£o, defina MYSQL_PUBLIC_URL ou MYSQL_URL.');
    console.log('üì¶ [PROD] Conectando ao banco (Railway URL)‚Ä¶');
    const p = mysql.createPool(uri);
    await testConnection(p);
    console.log('‚úÖ [PROD] Conectado (Railway URL)');
    return p;
  }

  // üß™ DESENVOLVIMENTO ‚Üí Tenta local primeiro (3306 ‚Üí 3307)
  console.log('üíª [DEV] Tentando banco local primeiro‚Ä¶');

  const localCfgBase = {
    host: process.env.MYSQLHOST || '127.0.0.1',
    user: process.env.MYSQLUSER || 'root',
    password: process.env.MYSQLPASSWORD || 'senha123',
    database: process.env.MYSQLDATABASE || 'poliub',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
  };

  for (const port of [3306, 3307]) {
    try {
      console.log(`üîå [DEV] Tentando localhost:${port}`);
      const p = mysql.createPool({ ...localCfgBase, port });
      await testConnection(p);
      console.log(`‚úÖ [DEV] Conectado no local ${localCfgBase.host}:${port}`);
      return p;
    } catch (err) {
      // tenta pr√≥ximo
    }
  }

  // Se tiver Service Vars locais (sem URL), tenta elas
  if (process.env.MYSQLHOST && process.env.MYSQLPORT) {
    try {
      const p = mysql.createPool({
        host: process.env.MYSQLHOST,
        port: +process.env.MYSQLPORT,
        user: process.env.MYSQLUSER,
        password: process.env.MYSQLPASSWORD,
        database: process.env.MYSQLDATABASE,
        waitForConnections: true,
        connectionLimit: 10,
        queueLimit: 0,
      });
      console.log(`üì¶ [DEV] Tentando Service Vars ${process.env.MYSQLHOST}:${process.env.MYSQLPORT}`);
      await testConnection(p);
      console.log('‚úÖ [DEV] Conectado via Service Vars');
      return p;
    } catch (err) {
      // segue o fluxo
    }
  }

  // Por √∫ltimo, se houver URL (ex.: voc√™ mant√©m a URL no .env), usa como fallback
  if (uri) {
    console.warn('‚ö†Ô∏è [DEV] Banco local indispon√≠vel. Caindo para a URL (Railway) como fallback.');
    const p = mysql.createPool(uri);
    await testConnection(p);
    console.log('‚úÖ [DEV] Conectado via URL (fallback)');
    return p;
  }

  throw new Error('N√£o foi poss√≠vel conectar ao MySQL (local, service vars ou URL).');
}

initDb()
  .then((p) => { pool = p; })
  .catch((err) => {
    console.error('‚ùå Erro ao inicializar DB:', err.message);
    process.exit(1);
  });

function getConnection() {
  if (!pool) throw new Error('Pool ainda n√£o inicializado');
  return pool.getConnection();
}

module.exports = { initDb, getConnection };
